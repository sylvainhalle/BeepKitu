#created on: Aug 31, 2009
package edu.ucsc.eis.mario

#list any import classes here.
import edu.ucsc.eis.mario.sprites.*
import edu.ucsc.eis.mario.events.*
import edu.ucsc.eis.mario.repairs.*
import edu.ucsc.eis.mario.level.*
import java.util.ArrayList
import java.util.Iterator
import java.util.Collections
import javax.jms.*
import function org.mockito.Mockito.*
import org.apache.log4j.Logger

#declare any global variables here
global javax.jms.MessageProducer producer
global javax.jms.Session session
global org.apache.log4j.Logger logger

declare Jump
    @role(event)
    @expires(5s)
end

declare Landing
    @role(event)
    @expires(1s)
end

declare BulletBillSpawn
    @role(event)
    @timestamp(spawnTime)
    @expires(3s)
end

# Test rules to make sure facts are inserted
rule "jumpEventFound"
    ruleflow-group "Test"
    when
        $jump : Jump()
    then
        logger.debug("Found a jump event: " + $jump);
end

rule "landingEventFound"
    ruleflow-group "Test"
    when
        $landing : Landing()
    then
        logger.debug("Found a landing event: " + $landing);
end

rule "billSpawnEventFound"
    ruleflow-group "Test"
    when
        $bill : BulletBillSpawn()
    then
        logger.debug("Found a Bullet Bill: " + $bill);
end

rule "valueChangeFound"
    ruleflow-group "Test"
    when
        $change : ValueChange()
    then
        logger.debug("Found a value change: " + $change);
end

# Book-keeping rules to ensure working agenda is valid from tick-to-tick
rule "Retract all jumps when a landing is found"
    ruleflow-group "Bookkeeping"
    when
        $landing : Landing()
        $jumps : ArrayList(size > 0) from collect(Jump())
    then
        for (Object jump : $jumps) {
            retract(jump);
        }
        
        retract($landing);
end

rule "Retract all landings"
    ruleflow-group "Bookkeeping"
    salience -1
    when
        $landing : Landing()
    then
        retract($landing);
end

rule "retractDeath"
    ruleflow-group "Bookkeeping"
    when
        $newLives : ArrayList(size > 0) from collect(NewLife())
        $deaths : ArrayList(size > 0) from collect(Death())
    then
        for (Object death : $deaths) {
            retract(death);
        }

        for (Object newLife : $newLives) {
            retract(newLife);
        }
end

rule "Retract Mario positions"
    ruleflow-group "Bookkeeping"
    salience -1
    when
        $position : MarioPosition()
    then
        retract($position);
end

rule "sendSentinel"
    ruleflow-group "Bookkeeping"
    when
        String()
    then
        logger.debug("Sending sentinel");

        try {
            producer.send(session.createTextMessage("Sentinel"));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Sentinel exception " + e);
            e.printStackTrace();
        }
end

//The window of time Mario jumped is too long
rule "marioJumpTooLong"
    ruleflow-group "Integrity"
    duration(2s)
    when
        $jump : Jump($mario : mario)
        not(Landing(this after[0s,2s] $jump))
    then
        logger.info("Mario jumped too long");
        
        try {
            producer.send(session.createObjectMessage(new MarioMovement(false, null, null)));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Jump too long exception " + e);
            e.printStackTrace();
        }
end

rule "marioJumpTooHigh"
    ruleflow-group "Integrity"
    when
        $jump : Jump(jumpTime > 7)
    then
        logger.info("Mario jumped too high");

        try {
            producer.send(session.createObjectMessage(new MarioMovement(false, 10f, $jump.getXAcceleration() * 1.5f)));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Jump too high exception " + e);
            e.printStackTrace();
        }
end

rule "marioDoubleJump"
    ruleflow-group "Integrity"
    when
        $jump1 : Jump()
        $jump2 : Jump(this != $jump1, this after $jump1,
            mario.isSliding == false, mario.jumpTime != 0, $mario : mario)
    then
        logger.info("Mario double jumped");

        try {
            producer.send(session.createObjectMessage(new MarioMovement(false, null, null)));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Jump too long exception " + e);
            e.printStackTrace();
        }
        retract($jump2);
end

// Find all Bullet Bills spawned from the same cannon in the last 10 seconds
rule "bulletBillSpawn"
    ruleflow-group "Integrity"
    when
        BulletBillSpawn($cannonId : cannonId)
        $list : ArrayList(size > 1) from collect(BulletBillSpawn(cannonId == $cannonId) over window:time(3s))
    then
        BulletBillSpawn newestBillSpawn = (BulletBillSpawn) Collections.max($list);

        try {
            producer.send(session.createObjectMessage(new RemoveSprite(newestBillSpawn.getBillId())));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Bullet bill exception " + e);
            e.printStackTrace();
        }

        retract(newestBillSpawn);
        logger.info("Bullet bills firing too fast, retracted " + newestBillSpawn);
end

rule "coinValue"
    ruleflow-group "Integrity"
    when
        $change : ValueChange(changeType == ValueChange.COIN_CHANGE, eval((startValue + 1) != endValue))
    then
        try {
            producer.send(session.createObjectMessage(new ValueRepair(ValueChange.COIN_CHANGE, $change.getStartValue() + 1)));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Coin value exception " + e);
            e.printStackTrace();
        }

        logger.info("Changing coin value");
        retract($change);
end

rule "stopMarioInteractionWhenDead"
    ruleflow-group "Integrity"
    when
        Death()
    then
        try {
            //producer.send(session.createObjectMessage(new MarioMovement(null, 0f, 0f)));
            producer.send(session.createObjectMessage(new DisableKeys()));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Jump too high exception " + e);
            e.printStackTrace();
        }

        logger.info("Mario is dead, stopping movement");
end

rule "pitTooLong"
    ruleflow-group "Integrity"
    when
        LevelGenerated($level : level)
        $pit : Pit((length > 4 && hasStairs == true) ||
            (length > 6 && hasStairs == false))
            from $level.pits
    then
        int requiredLength = 6;
        int requiredHeight = 1;

        if ($pit.hasStairs == true) {
            requiredLength = 4;
            requiredHeight = 3;
        }
        
        try {
            //producer.send(session.createObjectMessage(new MarioMovement(null, 0f, 0f)));
            //Fill in from the back
            producer.send(session.createObjectMessage(new WriteBlocks($pit.getEndX(), $pit.getStartX() + requiredLength, requiredHeight)));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Pit exception " + e);
            e.printStackTrace();
        }

        logger.info("Found pit that is too long: " + $pit);
end

rule "marioOutOfBounds"
    ruleflow-group "Integrity"
    when
        not Death()
        LevelGenerated($level : level)
        $marioPosition : MarioPosition((x < 0 || x > ($level.width * 16) || y < -60 || y > (($level.height * 16) + 20)))
    then
        try {
            producer.send(session.createObjectMessage(new RemoveSprite($marioPosition.getId())));
        } catch (Exception e) {
            if (producer == null) { System.err.println("Producer was null"); }
            if (session == null) { System.err.println("Session was null"); }
            logger.error("Remove sprite exception " + e);
            e.printStackTrace();
        }

        logger.info("Mario ID is " + $marioPosition.getMario().getId());
        logger.info(String.format("Mario is out of bounds: (%f, %f) Level width/height: (%d, %d)",
            $marioPosition.getX(), $marioPosition.getY(), $level.width, $level.height));
end
